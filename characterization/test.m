clear;

addpath old;

t = (-20:0.1:20)';

ktdbins = 4;
ktdfeats = ["txdir", "tydir", "tzdir", "nxdir", "nydir", "nzdir",...
"bxdir", "bydir", "bzdir"];
ktdnormalize = false;

shapeEntDelta = 0.2;
shapeFeats = ["Bending energy", "Elongation", "Entropy",...
"Major axis length", "Total curvature"];

harFeats = ["asm", "contrast", "correlation", "variance",...
"idm", "saverage", "svariance", "sentropy", "entropy", "dvariance", "dentropy", "imc1", "imc2", "mcc"];

fdts = 0.1;
fdnormalize = true;

tdts = 0.1;
tdnormalize = false;

spnormalize = true;

downsFactor = 7;
downsnormalize = true;

extractors = {... 
KTD("bins", ktdbins, "selectedFeats", ktdfeats, "normalize", ktdnormalize),...
Shape("entropyDelta", shapeEntDelta, "selectedFeats", shapeFeats),...
Haralick("selectedFeats", harFeats),...
FrecuencyDomainStats("timeStep", fdts, "normalize",fdnormalize),...
TimeDomainStats("timeStep", tdts , "normalize",tdnormalize),...
SplinesClasses("normalize",spnormalize,"time",t),...
BendingEnergy(t),...
Downsampling(numel(t),"factor",downsFactor, "normalize", downsnormalize)
};

clousures = {@(s) ktd(s(:,1),s(:,2),s(:,3), ktdbins, ktdfeats, ktdnormalize),...
    @(s) trayectorydescs(s(:,1),s(:,2),s(:,3), shapeFeats, shapeEntDelta),...
    ...
    @(s) [graycofeats(s(:,1)', cellstr(harFeats)),...
    graycofeats(s(:,2)', cellstr(harFeats)),...
    graycofeats(s(:,3)', cellstr(harFeats))],...
    ...
    @(s) [frequency_domain_stats(s(:,1), fdts, fdnormalize),...
    frequency_domain_stats(s(:,2), fdts, fdnormalize),...
    frequency_domain_stats(s(:,3), fdts, fdnormalize)],...
    ...
    @(s) [time_domain_stats(s(:,1), tdts, tdnormalize),...
    time_domain_stats(s(:,2), tdts, tdnormalize),...
    time_domain_stats(s(:,3), tdts, tdnormalize)],...
    ...
    @(s) [splinesclasses(t, s(:,1), spnormalize, 0),...
    splinesclasses(t, s(:,2), spnormalize, 0),...
    splinesclasses(t, s(:,3), spnormalize, 0)],...
    ...
    @(s) [bendingenergy2(t, s(:,1)),bendingenergy2(t, s(:,2)),...
    bendingenergy2(t, s(:,3))],...
    ...
    @(s) [samplecurve(s(:,1)', downsFactor, downsnormalize),...
    samplecurve(s(:,2)', downsFactor, downsnormalize),...
    samplecurve(s(:,3)', downsFactor, downsnormalize)]};

x = sin(t);
x = x - min(x);
x = x ./ max(x);
x = round(x .* 255);

y = 10 * cos(t);
y = y - min(y);
y = y ./ max(y);
y = round(y .* 255);

z = cos(t);
z = z - min(z);
z = z ./ max(z);
z = round(z .* 255);

for i = 1:numel(extractors)
    feat1 = extractors{i}.extract([x y z]);
    func = clousures{i};
    feat2 = func([x y z]);
     if sum(feat1 ~= feat2) == 0
        disp(['Extractor ', num2str(i), ' works well']);
    else
        disp(['Extractor ', num2str(i), ' does not work']);
    end
end